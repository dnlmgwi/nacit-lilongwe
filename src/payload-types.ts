/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    terms: Term;
    users: User;
    'cached-responses': CachedResponse;
    'chat-feedback': ChatFeedback;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    terms: TermsSelect<false> | TermsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'cached-responses': CachedResponsesSelect<false> | CachedResponsesSelect<true>;
    'chat-feedback': ChatFeedbackSelect<false> | ChatFeedbackSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
    notificationBanner: NotificationBanner;
    aiAssistant: AiAssistant;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    notificationBanner: NotificationBannerSelect<false> | NotificationBannerSelect<true>;
    aiAssistant: AiAssistantSelect<false> | AiAssistantSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | HeroBlock
    | StoryBlock
    | FullHeroBlock
    | PricingTableBlock
    | ProductBlocks
    | ProductStepsBlocks
    | CTAFullBlock
    | CTALargeBlock
    | CTASmallBlock
    | FeatureBlock
    | PlatformFeatures
    | FAQBlock
    | TeamBlock
    | IndustryBlocks
    | RatingBlock
    | HeroBgBlock
    | SecurityBlock
    | TermsBlock
    | {
        title?: string | null;
        showCategories?: boolean | null;
        limit?: number | null;
        introContent?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'relatedPosts';
      }
    | ClientsBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  /**
   * The author of this post
   */
  author: number | User;
  heroImage: number | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Post)[] | null;
  categories: (number | Category)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  /**
   * User role determines access permissions
   */
  role: 'super_admin' | 'admin' | 'dev' | 'editor' | 'author' | 'contributor';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  sections?:
    | {
        /**
         * Choose the type of icon to display
         */
        icon: string;
        title: string;
        content: string;
        id?: string | null;
      }[]
    | null;
  socialLinks?: {
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    linkedin?: string | null;
    youtube?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock".
 */
export interface HeroBlock {
  showNotice?: boolean | null;
  noticeLink?: {
    /**
     * Add text for the notice banner
     */
    noticeText: string;
    /**
     * Add a link to the notice banner
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add up to 2 call to action buttons
   */
  buttons?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  showIcons?: boolean | null;
  /**
   * Upload an image for the hero section
   */
  media?: (number | null) | Media;
  useImagePlaceholder?: boolean | null;
  backgroundColor?: ('brand-dark-green' | 'brand-lime' | 'brand-green' | 'white') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StoryBlock".
 */
export interface StoryBlock {
  /**
   * Optional small text displayed above the heading (e.g. "Our Mobile App")
   */
  preHeading?: string | null;
  /**
   * The main title of the feature block (e.g. "Financial Freedom in Three Steps")
   */
  heading: string;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Add checkmarked feature items to highlight key points
   */
  featureItems?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Choose the type of media to display
   */
  mediaType?: ('image' | 'svg' | 'lottie') | null;
  /**
   * Upload an image for the feature section
   */
  media?: (number | null) | Media;
  /**
   * Paste your SVG code here
   */
  svgCode?: string | null;
  /**
   * Paste your Lottie animation JSON here
   */
  lottieJSON?: string | null;
  /**
   * Choose the layout for the feature block
   */
  layout?: ('imageRight' | 'imageLeft' | 'center') | null;
  /**
   * Choose the background color for the feature block
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Choose the border radius for the media element
   */
  mediaBorderRadius?: ('rounded-none' | 'rounded-xl' | 'rounded-2xl' | 'rounded-3xl') | null;
  /**
   * Choose the width of the media element (for side-by-side layouts)
   */
  mediaWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  /**
   * Choose the width of the content section (for side-by-side layouts)
   */
  contentWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'storyBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FullHeroBlock".
 */
export interface FullHeroBlock {
  showNotice?: boolean | null;
  noticeLink?: {
    /**
     * Add text for the notice banner
     */
    noticeText: string;
    /**
     * Add a link to the notice banner
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Optional small text displayed above the heading (e.g. "Our Products")
   */
  preHeading?: string | null;
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add up to 2 call to action buttons
   */
  buttons?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  showIcons?: boolean | null;
  useImagePlaceholder?: boolean | null;
  /**
   * Upload an image for the hero section
   */
  media?: (number | null) | Media;
  backgroundColor?: ('brand-dark-green' | 'brand-lime' | 'brand-green' | 'white') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'fullHeroBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PricingTableBlock".
 */
export interface PricingTableBlock {
  heading: string;
  subheading?: string | null;
  categories?:
    | {
        name: string;
        features?:
          | {
              name: string;
              value: 'text' | 'icon';
              text?: string | null;
              icon?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductBlocks".
 */
export interface ProductBlocks {
  /**
   * Optional small text displayed above the heading (e.g. "Our Products")
   */
  preHeading?: string | null;
  /**
   * The main title of the section (e.g. "Access Your Pay, Not Your Savings")
   */
  heading?: string | null;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add product cards with text and image
   */
  products: {
    /**
     * The title of the product (e.g. "For Employees")
     */
    title: string;
    /**
     * The description of the product benefit
     */
    description: string;
    /**
     * Add a button link for this product (defaults to "Discover")
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
    /**
     * Upload an image (recommended ratio 1:1 or 4:3)
     */
    media?: (number | null) | Media;
    id?: string | null;
  }[];
  /**
   * Select the background color for the section (defaults to white)
   */
  backgroundColor?: ('white' | 'gray' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Select the background color for the product cards
   */
  productCardColor?: ('brand-dark-green' | 'brand-green' | 'gray' | 'white') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'productBlocks';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductStepsBlocks".
 */
export interface ProductStepsBlocks {
  /**
   * Optional small text displayed above the heading (e.g. "Our Products")
   */
  preHeading?: string | null;
  /**
   * The main title of the section (e.g. "Access Your Pay, Not Your Savings")
   */
  heading?: string | null;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add steps cards with text and image
   */
  steps: {
    /**
     * The step name
     */
    title: string;
    /**
     * The description of the step
     */
    description: string;
    /**
     * Upload an image (recommended ratio 1:1 or 4:3)
     */
    media?: (number | null) | Media;
    id?: string | null;
  }[];
  /**
   * Select the background color for the section (defaults to white)
   */
  backgroundColor?: ('white' | 'gray' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Select the background color for the product cards
   */
  productCardColor?: ('brand-dark-green' | 'brand-green' | 'gray' | 'white') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'productStepsBlocks';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTAFullBlock".
 */
export interface CTAFullBlock {
  /**
   * Optional small text displayed above the heading
   */
  preHeading: string;
  /**
   * Add a CTA (e.g., "Access Your Pay, Not Your Savings")
   */
  heading: string;
  /**
   * Text displayed below the heading
   */
  subheading?: string | null;
  /**
   * Set the link for the CTA button
   */
  buttonLink: {
    /**
     * Where should the button link to?
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Choose the background color for the feature block
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ctaFullBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTALargeBlock".
 */
export interface CTALargeBlock {
  /**
   * Optional small text displayed above the heading
   */
  preHeading: string;
  /**
   * Use "or" in your text to create emphasis (e.g., "Zero hidden fees or interest charges")
   */
  heading: string;
  /**
   * Optional small text displayed below the heading
   */
  subheading?: string | null;
  /**
   * Set the link for the CTA button
   */
  buttonLink: {
    /**
     * Where should the button link to?
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Link to terms and conditions
   */
  termsLink: {
    /**
     * Where should the terms link to?
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Upload an illustration or image for the CTA section
   */
  illustration?: (number | null) | Media;
  useIllustrationPlaceholder?: boolean | null;
  /**
   * Select the background color for the card (defaults to white)
   */
  backgroundColor?: ('white' | 'gray' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ctaLargeBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTASmallBlock".
 */
export interface CTASmallBlock {
  /**
   * Add a CTA (e.g., "Can't find your answer?")
   */
  heading: string;
  /**
   * Text displayed below the heading
   */
  subheading?: string | null;
  /**
   * Set the link for the CTA button
   */
  buttonLink: {
    /**
     * Where should the button link to?
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'ctaSmallBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock".
 */
export interface FeatureBlock {
  /**
   * Optional small text displayed above the heading (e.g. "Our Mobile App")
   */
  preHeading?: string | null;
  /**
   * The main title of the feature block (e.g. "Financial Freedom in Three Steps")
   */
  heading: string;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add checkmarked feature items to highlight key points
   */
  featureItems?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Choose the type of media to display
   */
  mediaType?: ('image' | 'svg' | 'lottie') | null;
  /**
   * Upload an image for the feature section
   */
  media?: (number | null) | Media;
  /**
   * Paste your SVG code here
   */
  svgCode?: string | null;
  /**
   * Paste your Lottie animation JSON here
   */
  lottieJSON?: string | null;
  /**
   * Toggle to show or hide the call to action button
   */
  showButton?: boolean | null;
  /**
   * Add a call to action button
   */
  button?: {
    /**
     * Set the link for the CTA button
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline') | null;
    };
  };
  /**
   * Choose the layout for the feature block
   */
  layout?: ('imageRight' | 'imageLeft' | 'center') | null;
  /**
   * Choose the background color for the feature block
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Choose the border radius for the media element
   */
  mediaBorderRadius?: ('rounded-none' | 'rounded-xl' | 'rounded-2xl' | 'rounded-3xl') | null;
  /**
   * Choose the width of the media element (for side-by-side layouts)
   */
  mediaWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  /**
   * Choose the width of the content section (for side-by-side layouts)
   */
  contentWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PlatformFeatures".
 */
export interface PlatformFeatures {
  /**
   * Optional small text displayed above the heading (e.g. "Our Mobile App")
   */
  preHeading?: string | null;
  /**
   * The main title of the platform features section
   */
  heading: string;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add platform features with icons
   */
  features?:
    | {
        title: string;
        description: string;
        /**
         * Choose the type of icon to display
         */
        iconType?: ('lucide' | 'svg') | null;
        /**
         * Enter the name of a Lucide icon (e.g., "Zap", "Shield", "CreditCard")
         */
        icon?: string | null;
        /**
         * Upload an SVG image
         */
        svgMedia?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Optional button to add below the features
   */
  button: {
    /**
     * Where should the button link to?
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'platformFeatures';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock".
 */
export interface FAQBlock {
  /**
   * Optional small text displayed above the heading
   */
  preHeading?: string | null;
  /**
   * The main title of the FAQ section
   */
  heading?: string | null;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add questions and answers for the FAQ section
   */
  faqItems?:
    | {
        /**
         * The question text
         */
        question: string;
        /**
         * The answer text
         */
        answer: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Add a call to action button (optional)
   */
  buttonLink: {
    /**
     * Where should the button link to?
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Select the background color for the FAQ section (defaults to white)
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'faqBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TeamBlock".
 */
export interface TeamBlock {
  /**
   * Optional small text displayed above the heading
   */
  preHeading?: string | null;
  /**
   * The main title of the team section
   */
  heading?: string | null;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add team members for the section
   */
  teamMembers?:
    | {
        /**
         * Upload a profile image for the team member
         */
        image: number | Media;
        /**
         * Team member name
         */
        name: string;
        /**
         * Team member job title or position
         */
        title: string;
        /**
         * Add social media links for the team member
         */
        links?:
          | {
              /**
               * Select the social media platform
               */
              platform: 'linkedin' | 'github' | 'twitter' | 'instagram' | 'facebook' | 'youtube' | 'website' | 'email';
              /**
               * Enter the URL or email address
               */
              url: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Select the background color for the team section (defaults to white)
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'teamBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IndustryBlocks".
 */
export interface IndustryBlocks {
  /**
   * Optional small text displayed above the heading (e.g. "Our Products")
   */
  preHeading?: string | null;
  /**
   * The main title of the section (e.g. "Access Your Pay, Not Your Savings")
   */
  heading?: string | null;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add Industry Images
   */
  industry: {
    /**
     * Upload an image (recommended ratio 1:1 or 4:3)
     */
    media?: (number | null) | Media;
    /**
     * The description of the industry
     */
    description: string;
    id?: string | null;
  }[];
  /**
   * Select the background color for the section (defaults to white)
   */
  backgroundColor?: ('white' | 'gray' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'industryBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RatingBlock".
 */
export interface RatingBlock {
  /**
   * Optional small text displayed above the heading (e.g. "Our Mobile App")
   */
  preHeading?: string | null;
  /**
   * The main title of the feature block (e.g. "Financial Freedom in Three Steps")
   */
  heading: string;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Add checkmarked feature items to highlight key points
   */
  featureItems?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Choose the type of media to display
   */
  mediaType?: ('image' | 'svg' | 'lottie') | null;
  /**
   * Upload an image for the feature section
   */
  media?: (number | null) | Media;
  /**
   * Paste your SVG code here
   */
  svgCode?: string | null;
  /**
   * Paste your Lottie animation JSON here
   */
  lottieJSON?: string | null;
  /**
   * Toggle to show or hide the call to action button
   */
  showButton?: boolean | null;
  /**
   * Add a call to action button
   */
  button?: {
    /**
     * Set the link for the CTA button
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline') | null;
    };
  };
  /**
   * Toggle to show or hide the rating component
   */
  showRatingComponent?: boolean | null;
  /**
   * Add a rating Component
   */
  ratingComponent?: {
    rating: number;
    /**
     * Enter the name of a Lucide icon (e.g., "Zap", "Shield", "CreditCard")
     */
    icon?: string | null;
    /**
     * Descriptive text for this icon
     */
    text: string;
  };
  /**
   * Choose the layout for the feature block
   */
  layout?: ('imageRight' | 'imageLeft' | 'center') | null;
  /**
   * Choose the background color for the feature block
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Choose the border radius for the media element
   */
  mediaBorderRadius?: ('rounded-none' | 'rounded-xl' | 'rounded-2xl' | 'rounded-3xl') | null;
  /**
   * Choose the width of the media element (for side-by-side layouts)
   */
  mediaWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  /**
   * Choose the width of the content section (for side-by-side layouts)
   */
  contentWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ratingBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBgBlock".
 */
export interface HeroBgBlock {
  showNotice?: boolean | null;
  noticeLink?: {
    /**
     * Add text for the notice banner
     */
    noticeText: string;
    /**
     * Add a link to the notice banner
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Optional small text displayed above the heading (e.g. "Our Products")
   */
  preHeading?: string | null;
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add up to 2 call to action buttons
   */
  buttons?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  showIcons?: boolean | null;
  useImagePlaceholder?: boolean | null;
  /**
   * Upload an image for the hero section
   */
  media?: (number | null) | Media;
  backgroundColor?: ('brand-dark-green' | 'brand-lime' | 'brand-green' | 'white') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroBgBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SecurityBlock".
 */
export interface SecurityBlock {
  /**
   * Optional small text displayed above the heading (e.g. "Our Mobile App")
   */
  preHeading?: string | null;
  /**
   * The main title of the feature block (e.g. "Financial Freedom in Three Steps")
   */
  heading: string;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  featureItems?:
    | {
        /**
         * Enter the name of a Lucide icon (e.g., "Zap", "Shield", "CreditCard")
         */
        icon: string;
        title: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Choose the type of media to display
   */
  mediaType?: ('image' | 'svg' | 'lottie') | null;
  /**
   * Upload an image for the feature section
   */
  media?: (number | null) | Media;
  /**
   * Paste your SVG code here
   */
  svgCode?: string | null;
  /**
   * Paste your Lottie animation JSON here
   */
  lottieJSON?: string | null;
  /**
   * Toggle to show or hide the call to action button
   */
  showButton?: boolean | null;
  /**
   * Add a call to action button
   */
  button?: {
    /**
     * Set the link for the CTA button
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline') | null;
    };
  };
  /**
   * Choose the layout for the feature block
   */
  layout?: ('imageRight' | 'imageLeft' | 'center') | null;
  /**
   * Choose the background color for the feature block
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  /**
   * Choose the border radius for the media element
   */
  mediaBorderRadius?: ('rounded-none' | 'rounded-xl' | 'rounded-2xl' | 'rounded-3xl') | null;
  /**
   * Choose the width of the media element (for side-by-side layouts)
   */
  mediaWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  /**
   * Choose the width of the content section (for side-by-side layouts)
   */
  contentWidth?: ('md:w-1/3' | 'md:w-1/2') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'securityBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TermsBlock".
 */
export interface TermsBlock {
  /**
   * The main title of the terms section
   */
  heading?: string | null;
  /**
   * Supporting text displayed below the heading
   */
  subHeading?: string | null;
  /**
   * Select the terms to display in this block
   */
  terms: (number | Term)[];
  /**
   * Select the background color for the terms section (defaults to white)
   */
  backgroundColor?: ('gray' | 'white' | 'brand-dark-green' | 'brand-lime' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'termsBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "terms".
 */
export interface Term {
  id: number;
  /**
   * The title of the term
   */
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The content of the term
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientsBlock".
 */
export interface ClientsBlock {
  heading?: string | null;
  subheading?: string | null;
  clients?:
    | {
        name: string;
        /**
         * Recommended size: 160x80px (WebP or PNG with transparent background)
         */
        logo: number | Media;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  backgroundColor?: ('white' | 'gray-50' | 'brand-dark-green' | 'brand-green') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'clientsBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cached-responses".
 */
export interface CachedResponse {
  id: number;
  question: string;
  response: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  usageCount?: number | null;
  lastUsed?: string | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chat-feedback".
 */
export interface ChatFeedback {
  id: number;
  question: string;
  response: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  isPositive?: boolean | null;
  metadata?: {
    userAgent?: string | null;
    ipAddress?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'terms';
        value: number | Term;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'cached-responses';
        value: number | CachedResponse;
      } | null)
    | ({
        relationTo: 'chat-feedback';
        value: number | ChatFeedback;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        heroBlock?: T | HeroBlockSelect<T>;
        storyBlock?: T | StoryBlockSelect<T>;
        fullHeroBlock?: T | FullHeroBlockSelect<T>;
        pricingTable?: T | PricingTableBlockSelect<T>;
        productBlocks?: T | ProductBlocksSelect<T>;
        productStepsBlocks?: T | ProductStepsBlocksSelect<T>;
        ctaFullBlock?: T | CTAFullBlockSelect<T>;
        ctaLargeBlock?: T | CTALargeBlockSelect<T>;
        ctaSmallBlock?: T | CTASmallBlockSelect<T>;
        featureBlock?: T | FeatureBlockSelect<T>;
        platformFeatures?: T | PlatformFeaturesSelect<T>;
        faqBlock?: T | FAQBlockSelect<T>;
        teamBlock?: T | TeamBlockSelect<T>;
        industryBlock?: T | IndustryBlocksSelect<T>;
        ratingBlock?: T | RatingBlockSelect<T>;
        heroBgBlock?: T | HeroBgBlockSelect<T>;
        securityBlock?: T | SecurityBlockSelect<T>;
        termsBlock?: T | TermsBlockSelect<T>;
        relatedPosts?:
          | T
          | {
              title?: T;
              showCategories?: T;
              limit?: T;
              introContent?: T;
              id?: T;
              blockName?: T;
            };
        clientsBlock?: T | ClientsBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  sections?:
    | T
    | {
        icon?: T;
        title?: T;
        content?: T;
        id?: T;
      };
  socialLinks?:
    | T
    | {
        facebook?: T;
        twitter?: T;
        instagram?: T;
        linkedin?: T;
        youtube?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock_select".
 */
export interface HeroBlockSelect<T extends boolean = true> {
  showNotice?: T;
  noticeLink?:
    | T
    | {
        noticeText?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  richText?: T;
  buttons?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  showIcons?: T;
  media?: T;
  useImagePlaceholder?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StoryBlock_select".
 */
export interface StoryBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  richText?: T;
  featureItems?:
    | T
    | {
        text?: T;
        id?: T;
      };
  mediaType?: T;
  media?: T;
  svgCode?: T;
  lottieJSON?: T;
  layout?: T;
  backgroundColor?: T;
  mediaBorderRadius?: T;
  mediaWidth?: T;
  contentWidth?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FullHeroBlock_select".
 */
export interface FullHeroBlockSelect<T extends boolean = true> {
  showNotice?: T;
  noticeLink?:
    | T
    | {
        noticeText?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  preHeading?: T;
  richText?: T;
  buttons?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  showIcons?: T;
  useImagePlaceholder?: T;
  media?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PricingTableBlock_select".
 */
export interface PricingTableBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  categories?:
    | T
    | {
        name?: T;
        features?:
          | T
          | {
              name?: T;
              value?: T;
              text?: T;
              icon?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductBlocks_select".
 */
export interface ProductBlocksSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  products?:
    | T
    | {
        title?: T;
        description?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        media?: T;
        id?: T;
      };
  backgroundColor?: T;
  productCardColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductStepsBlocks_select".
 */
export interface ProductStepsBlocksSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  steps?:
    | T
    | {
        title?: T;
        description?: T;
        media?: T;
        id?: T;
      };
  backgroundColor?: T;
  productCardColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTAFullBlock_select".
 */
export interface CTAFullBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subheading?: T;
  buttonLink?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTALargeBlock_select".
 */
export interface CTALargeBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subheading?: T;
  buttonLink?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  termsLink?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  illustration?: T;
  useIllustrationPlaceholder?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTASmallBlock_select".
 */
export interface CTASmallBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  buttonLink?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock_select".
 */
export interface FeatureBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  featureItems?:
    | T
    | {
        text?: T;
        id?: T;
      };
  mediaType?: T;
  media?: T;
  svgCode?: T;
  lottieJSON?: T;
  showButton?: T;
  button?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
      };
  layout?: T;
  backgroundColor?: T;
  mediaBorderRadius?: T;
  mediaWidth?: T;
  contentWidth?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PlatformFeatures_select".
 */
export interface PlatformFeaturesSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  features?:
    | T
    | {
        title?: T;
        description?: T;
        iconType?: T;
        icon?: T;
        svgMedia?: T;
        id?: T;
      };
  backgroundColor?: T;
  button?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock_select".
 */
export interface FAQBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  faqItems?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  buttonLink?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TeamBlock_select".
 */
export interface TeamBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  teamMembers?:
    | T
    | {
        image?: T;
        name?: T;
        title?: T;
        links?:
          | T
          | {
              platform?: T;
              url?: T;
              id?: T;
            };
        id?: T;
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IndustryBlocks_select".
 */
export interface IndustryBlocksSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  industry?:
    | T
    | {
        media?: T;
        description?: T;
        id?: T;
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RatingBlock_select".
 */
export interface RatingBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  featureItems?:
    | T
    | {
        text?: T;
        id?: T;
      };
  mediaType?: T;
  media?: T;
  svgCode?: T;
  lottieJSON?: T;
  showButton?: T;
  button?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
      };
  showRatingComponent?: T;
  ratingComponent?:
    | T
    | {
        rating?: T;
        icon?: T;
        text?: T;
      };
  layout?: T;
  backgroundColor?: T;
  mediaBorderRadius?: T;
  mediaWidth?: T;
  contentWidth?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBgBlock_select".
 */
export interface HeroBgBlockSelect<T extends boolean = true> {
  showNotice?: T;
  noticeLink?:
    | T
    | {
        noticeText?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  preHeading?: T;
  richText?: T;
  buttons?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  showIcons?: T;
  useImagePlaceholder?: T;
  media?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SecurityBlock_select".
 */
export interface SecurityBlockSelect<T extends boolean = true> {
  preHeading?: T;
  heading?: T;
  subHeading?: T;
  featureItems?:
    | T
    | {
        icon?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  mediaType?: T;
  media?: T;
  svgCode?: T;
  lottieJSON?: T;
  showButton?: T;
  button?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
      };
  layout?: T;
  backgroundColor?: T;
  mediaBorderRadius?: T;
  mediaWidth?: T;
  contentWidth?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TermsBlock_select".
 */
export interface TermsBlockSelect<T extends boolean = true> {
  heading?: T;
  subHeading?: T;
  terms?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientsBlock_select".
 */
export interface ClientsBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  clients?:
    | T
    | {
        name?: T;
        logo?: T;
        url?: T;
        id?: T;
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  author?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "terms_select".
 */
export interface TermsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cached-responses_select".
 */
export interface CachedResponsesSelect<T extends boolean = true> {
  question?: T;
  response?: T;
  usageCount?: T;
  lastUsed?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chat-feedback_select".
 */
export interface ChatFeedbackSelect<T extends boolean = true> {
  question?: T;
  response?: T;
  isPositive?: T;
  metadata?:
    | T
    | {
        userAgent?: T;
        ipAddress?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  megaMenuItems?:
    | {
        label: string;
        /**
         * Enter a valid Lucide icon name (e.g., "Building2", "Users", "Wallet")
         */
        icon?: string | null;
        sections: {
          title: string;
          items?:
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'posts';
                        value: number | Post;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                /**
                 * Enter a valid Lucide icon name (e.g., "Building2", "Users", "Wallet")
                 */
                icon?: string | null;
                /**
                 * Describe the contents of this page
                 */
                description: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[]
    | null;
  authButtons?: {
    showRegister?: boolean | null;
    registerButton?: {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?:
          | ({
              relationTo: 'pages';
              value: number | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: number | Post;
            } | null);
        url?: string | null;
        label: string;
        /**
         * Choose how the link should be rendered.
         */
        appearance?: ('default' | 'outline') | null;
      };
      /**
       * Enter a valid Lucide icon name (e.g., "UserPlus", "LogIn")
       */
      icon?: string | null;
      authItems?:
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?:
                | ({
                    relationTo: 'pages';
                    value: number | Page;
                  } | null)
                | ({
                    relationTo: 'posts';
                    value: number | Post;
                  } | null);
              url?: string | null;
              label: string;
            };
            /**
             * Enter a valid Lucide icon name (e.g., "Building2", "Users", "Wallet")
             */
            icon?: string | null;
            /**
             * Brief description of this auth option
             */
            description: string;
            id?: string | null;
          }[]
        | null;
    };
    showSignIn?: boolean | null;
    signInButton?: {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?:
          | ({
              relationTo: 'pages';
              value: number | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: number | Post;
            } | null);
        url?: string | null;
        label: string;
        /**
         * Choose how the link should be rendered.
         */
        appearance?: ('default' | 'outline') | null;
      };
      /**
       * Enter a valid Lucide icon name (e.g., "UserPlus", "LogIn")
       */
      icon?: string | null;
      authItems?:
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?:
                | ({
                    relationTo: 'pages';
                    value: number | Page;
                  } | null)
                | ({
                    relationTo: 'posts';
                    value: number | Post;
                  } | null);
              url?: string | null;
              label: string;
            };
            /**
             * Enter a valid Lucide icon name (e.g., "Building2", "Users", "Wallet")
             */
            icon?: string | null;
            /**
             * Brief description of this auth option
             */
            description: string;
            id?: string | null;
          }[]
        | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  productLinks?: {
    title: string;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  companyLinks?: {
    title: string;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  resourceLinks?: {
    title: string;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  contactInfo?: {
    email: string;
    phone: string;
    alternativePhone?: string | null;
    location: string;
  };
  appDownloadLinks?: {
    title: string;
    appStoreLink: string;
    googlePlayLink: string;
  };
  socialLinks?: {
    facebook: string;
    linkedin: string;
    twitter: string;
    instagram: string;
    youtube: string;
  };
  copyright?: string | null;
  externalCopyright?: string | null;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notificationBanner".
 */
export interface NotificationBanner {
  id: number;
  enabled?: boolean | null;
  message?: string | null;
  hasLink?: boolean | null;
  linkDetails?: {
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline') | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aiAssistant".
 */
export interface AiAssistant {
  id: number;
  enabled?: boolean | null;
  welcomeMessage?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  megaMenuItems?:
    | T
    | {
        label?: T;
        icon?: T;
        sections?:
          | T
          | {
              title?: T;
              items?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    icon?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  authButtons?:
    | T
    | {
        showRegister?: T;
        registerButton?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              icon?: T;
              authItems?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    icon?: T;
                    description?: T;
                    id?: T;
                  };
            };
        showSignIn?: T;
        signInButton?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              icon?: T;
              authItems?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    icon?: T;
                    description?: T;
                    id?: T;
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  productLinks?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
      };
  companyLinks?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
      };
  resourceLinks?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
      };
  contactInfo?:
    | T
    | {
        email?: T;
        phone?: T;
        alternativePhone?: T;
        location?: T;
      };
  appDownloadLinks?:
    | T
    | {
        title?: T;
        appStoreLink?: T;
        googlePlayLink?: T;
      };
  socialLinks?:
    | T
    | {
        facebook?: T;
        linkedin?: T;
        twitter?: T;
        instagram?: T;
        youtube?: T;
      };
  copyright?: T;
  externalCopyright?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notificationBanner_select".
 */
export interface NotificationBannerSelect<T extends boolean = true> {
  enabled?: T;
  message?: T;
  hasLink?: T;
  linkDetails?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aiAssistant_select".
 */
export interface AiAssistantSelect<T extends boolean = true> {
  enabled?: T;
  welcomeMessage?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}